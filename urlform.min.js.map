{
  "version": 3,
  "sources": ["nomod.js"],
  "sourcesContent": ["// URLFormJS is used for sticky forms and sharable URL links.  See README. \n'use strict';\n\n\n\n\n/**\n * FormParameter are the options for a form's field/parameter.\n *\n * Example:\n * {\n *  \"name\": \"send_news_and_updates\",\n *  \"id\":   \"input_send_news_and_updates',\n *  \"type\": \"bool\",\n *  \"funcTrue\": ()=> ToggleVisible(document.querySelector(\"#advancedOptions\"));\n * }\n *\n * - name:          Parameter name in the URI.  Is used as the default value for\n *                  id.\n *\n * - id:            Id of the html element if it differs from the name. Example,\n *                  URI parameter \"retrieve\" and html id \"Retrieve\"\n *\n * - type:          Type of the parameter (bool/string/number). Defaults to\n *                  string. For 'bool', if the parameter is present in the URL\n *                  and has a function set in 'funcTrue', the function will be\n *                  executed. (e.g. https://localhost/?send_news_and_updates)\n *                  using the example above will execute the 'ToggleVisible'\n *                  function.\n *\n * - func:          Called if set on each call to SetForm\n *                  (Populate and PopulateFromValues).\n *\n * - funcTrue:      Execute if param is true. e.g. `\"funcTrue\": ()\n *                  => {\n *                  ToggleVisible(document.querySelector(\"#advancedOptions\"))};`\n *\n * - queryLocation: Option for overriding the param in the URL link to either\n *                  be a query parameter, or a fragment query. Defaults to empty\n *                  string, which will inherit the 'defaultQueryLocation' from\n *                  the form wide options.\n * \n * - saveSetting:  Save and use this setting from local storage.  Will be\n *                  overwritten by URL flag values if present. \n * @typedef  {Object}        FormParameter\n * @property {String}        name\n * @property {String}        [id]\n * @property {ParamType}     [type=string]\n * @property {Function}      [func]\n * @property {Function}      [funcTrue]\n * @property {QueryLocation} [queryLocation=\"\"]\n * @property {bool}          [saveSetting=false]\n */\n\n/**\n * ParamType is the type for a given FormParameter.\n *\n * A ParamType may be one of the following:\n * - \"string\":  String and default type.\n * - \"bool\":    Boolean used for checkboxes.\n * - \"number\":  Number will convert text values to number and sanitize NaN.\n * - \"\":        Uses the default.\n * @typedef {\"string\" | \"bool\" | \"number\" | \"\"} ParamType\n */\n\n/**\n * QueryLocation is the option for what kind of query a form and/or form\n * parameter will be.\n *\n * A QueryLocation may be one of the following:\n * - \"fragment\": The query is preceded by '#' and '?'.\n * - \"query\":    The query is preceded by '?'.\n * - \"\":         Empty will inherit the form wide option for 'queryLocation'.\n * @typedef {\"fragment\" | \"query\" | \"\"} QueryLocation\n */\n\n/**\n * FormParameters is the main form object (Array) that holds the different\n * `FormParameter` field objects.\n * @typedef {Array<FormParameter>} FormParameters\n */\n\n/**\n * FormOptions are the optional fields for the initialized form. The FormOptions\n * object itself is not optional, and requires the 'id' of the initialized form.\n * The 'id' should match the 'id' of the HTMLFormElement on the page.\n * \n * FormOptions are in this form:\n * {\n * \"id\":\"ExampleUserForm\",\n * \"prefix\": \"input_\"\n * }\n * \n * Fields:\n * - prefix:               Form input prefix which will be prepended to name.\n * \n * - clearBtn:             Button element for clearing the form and\n *                         queries/fragments in the URL.\n * \n * - shareURLBtn:          Button element triggers generating share link.\n * \n * - shareURL:             Element ID of <a> for share link.\n * \n * - shareURLArea:         Element ID of text area for share link.\n * \n * - defaultQueryLocation: Link sets parameter in query or fragment query.\n *                         Defaults to fragment query (recommended).\n * \n * - callback:             Function that's executed each time the form is\n *                         processed.\n * \n * - cleanURL:             If set to `true`, does not preserve any extra\n *                         information from the URL that is not in the\n *                         initialized form. Defaults to false.\n * \n * Read only:\n * - FormParameters           Set by Init(). (Allows FormOptions to encapsulate\n *                            FormParameters.)\n * - Sanitized:               Whether 'FormOptions' has been sanitized.\n * - Inited:                  Whether URLFormJS module was initialized.\n * - ShareURLBtnElement:      Share URL button element in GUI.\n * - ClearBtnElement:         Clear the `shareURL` and form in GUI.\n * \n * \"Form mode\" parameters:\n * - formID:               HTMLFormElement ID of <form>. Sets `formMode` to true if populated. \n * \n * Form Mode read only\n * - FormMode:            Use `<form>` mode.  FormOptions must include a form 'id' found in the GUI.\n * - FormElement:        Form element in GUI, specified by 'id' in 'FormOptions'.\n * @typedef  {Object}               FormOptions\n * @property {FormParameters}       FormParameters\n * @property {String}               [prefix]\n * @property {String}               [clearBtn]\n * @property {String}               [shareURLBtn] \n * @property {String}               [shareURL]\n * @property {String}               [shareURLArea]\n * @property {QueryLocation}        [defaultQueryLocation=\"fragment\"]\n * @property {Function}             [callback]\n * @property {Boolean}              [cleanURL=false]\n * \n * // Read only Values (Set internally by library)\n * @property {Boolean}              Sanitized=false\n * @property {Boolean}              Inited=false\n * @property {HTMLButtonElement}    ShareURLBtnElement\n * @property {HTMLButtonElement}    ClearBtnElement\n * \n * // Form Mode\n * @property {String}               [formID]\n * // Form Mode Read Only\n * @property {Boolean}              FormMode=false\n * @property {HTMLFormElement}      FormElement\n\n */\n\n/**\n * Query is the Query string.  Everything after first ? and before first #.\n * @typedef {String}    QueryString\n */\n\n/**\n * Fragment is the Fragment string without `#`.  Everything after the first #.\n * @typedef {String}    FragmentString\n */\n\n/**\n * QuagPairs is an Object of key:value pairs for both Query Parameters and\n * Fragment Query Parameters. `quag` is the superset of `query` and `fragment`.\n * 'object' is diluted in meaning by JSDoc, and using '{}' will denote a key:val\n * object. See:\n * https://github.com/microsoft/TypeScript/issues/50321#issuecomment-1217224937\n * @typedef {{}}   QuagPairs\n */\n\n/**\n * Fragment holds the fragment parts from the URL. All parts may be nil.\n * Includes extras.\n * \n * TODO future: support other scheme starting delimiters and perhaps `?` for\n * fragment queries.\n * \n * - fragment:   The whole fragment string (everything included).\n * - pairs:      key:value object containing the fragment queries. Does not\n *               include extras.\n * - extras:     key:value that appear in fragment query but not in form.\n * - before:     Everything after '#' and if exists everything before the first\n *               '?'.\n * - query:      Everything after `before` and before the next fragment scheme\n *               delimiter, i.e. ':~:'. This is the \"middle part\".  This is the\n *               fragment query.\n * - after:      Everything after `query`.\n * @typedef  {Object}         Fragment\n * @property {FragmentString} string  \n * @property {QuagPairs}      pairs\n * @property {QuagPairs}      extras\n * @property {String}         before\n * @property {String}         query\n * @property {String}         after\n */\n\n\n/**\n * Query holds the fragment parts from the URL. All parts may be nil.\n * Includes extras.\n * \n * - string:     The string URL query component. Does not contain any fragment.\n * - pairs:      key:value object containing the queries. Includes extras.\n * - extras:     Extra query parameters given in the URL.\n * @typedef  {Object}       Query\n * @property {String}       string\n * @property {QuagPairs}    pairs\n * @property {QuagPairs}    extra\n */\n\n/**\n * QuagParts holds the query and fragment from the existing URL.  See README on\n * `quag`.\n *\n * - pairs:      All pairs.  key:value object containing `query.pairs` and\n *               `fragment.pairs`.\n * - fragment:   Fragment object.\n * - query:      Query Object.\n * @typedef  {Object}    QuagParts\n * @property {QuagPairs} pairs\n * @property {Query}     query\n * @property {Fragment}  fragment\n */\n\n\n/** @type {QueryLocation} */\nconst QueryLocationQuery = \"query\";\n\n/** @type {QueryLocation} */\nconst QueryLocationFragment = \"fragment\";\n\n/**\n * DefaultFormOptions where all options are set to their default case.\n * @type {FormOptions} \n */\nconst DefaultFormOptions = {\n\tFormParameters: [],\n\tprefix: \"\",\n\tshareURLBtn: \"#shareURLBtn\",\n\tshareURL: \"#shareURL\",\n\tshareURLArea: \"#shareURLArea\",\n\tdefaultQueryLocation: QueryLocationFragment,\n\tcallback: null,\n\tcleanURL: false,\n\tlocalStorageNamespace: \"URLFormJS_\",\n\t// Module fields not settable externally.  \n\tSanitized: false,\n\tInited: false,\n\tShareURLBtnElement: HTMLButtonElement,\n\tClearBtnElement: HTMLButtonElement,\n\n\t// Form Mode\n\tformID: \"\",\n\tFormMode: false,\n\tFormElement: HTMLFormElement,\n};\n\n/**\n * Initializes the globals and event listeners for the URLFormJS module.\n * If 'formOptions' is empty, defaults are used.\n * \n * @param   {FormOptions}    formOptions\n * @returns {FormOptions} \n */\nfunction Init(formOptions) {\n\t// console.log(formOptions);\n\tlet formOpt = {};\n\tformOpt = sanitizeFormOptions(formOptions);\n\n\tformOpt.ShareURLBtnElement = document.querySelector(formOpt.shareURLBtn);\n\tif (formOpt.ShareURLBtnElement != null) {\n\t\tformOpt.ShareURLBtnElement.addEventListener('click', () => ShareURI(formOpt)); // Must be anonymous, otherwise passes pointer event object.\n\t}\n\tformOpt.ClearBtnElement = document.querySelector(formOpt.clearBtn);\n\tif (formOpt.ClearBtnElement != null) {\n\t\tformOpt.ClearBtnElement.addEventListener('click', () => {\n\t\t\tClear(formOpt);\n\t\t});\n\t}\n\t// Form Mode\n\tif (!isEmpty(formOpt.formID)) {\n\t\tformOpt.FormElement = document.getElementById(formOpt.formID);\n\t\tif (formOpt.FormElement !== null) {\n\t\t\tformOpt.FormMode = true;\n\t\t}\n\t}\n\tformOpt.Inited = true;\n\treturn formOpt;\n}\n\n/**\n * Populate populates the GUI from the URI and saved setting.\n * @param   {FormOptions}    formOptions\n * @returns {void}\n * @throws  {Error}           If Init() has not been called.\n */\nfunction Populate(formOptions) {\n\t// Get local storage settings.  If set, URI should overwrite.  \n\tlet savedPairs = {};\n\tfor (let fp of formOptions.FormParameters) {\n\t\tif (fp.saveSetting) {\n\t\t\tsavedPairs[fp.name] = getSavedSetting(fp.name, formOptions);\n\t\t}\n\t}\n\n\tlet uriPairs = GetQuagParts(formOptions).pairs;\n\tlet pairs = {\n\t\t...savedPairs,\n\t\t...uriPairs,\n\t}\n\tPopulateFromValues(pairs, formOptions);\n}\n\n/**\n * Populates the form initialized in `Init()` from the given values. Values are\n * the given values to populate the form.\n * \n * @param   {QuagPairs}   quagPairs\n * @param   {FormOptions} formOptions\n * @returns {void}\n * @throws  {Error} Fails if Init() has not been called for the URLFormJS module.\n */\nfunction PopulateFromValues(quagPairs, formOptions) {\n\tif (!formOptions.Inited) {\n\t\tthrow new Error(\"URLFormJS: Init() must be called first to initialize the URLFormJS module.\");\n\t}\n\tSetForm(quagPairs, formOptions);\n\tShareURI(formOptions);\n}\n\n/**\n * getFragmentString returns URL fragment as a string, not including '#'.\n * See notes in function.\n *\n * @returns {Fragment.string}\n */\nfunction getFragmentString() {\n\tlet fParts = window.location.hash.split(\"#\"); // May not work in chrome, see note below.\n\n\t// Chrome removes ':~:' (fragment directives (for text fragments)), and\n\t// anything after the text fragment. Thus, calling 'window.location.hash' with\n\t// a URL of:\n\t// https://localhost:8082/#:~:text=hello?first_name=asdf&last_name=hello\n\t// will result: '#a'. And calling 'window.location.hash' with a URL of:\n\t// https://localhost:8082/#?first_name=asdf&last_name=hello:~:text=hello\n\t// will result: '#?first_name=asdf&last_name=hello'.\n\t// Firefox sees and preserves the text fragment. See:\n\t// https://stackoverflow.com/a/73366996/1923095\n\t// and\n\t// https://github.com/WICG/scroll-to-text-fragment/issues/193#issuecomment-1219640246\n\t//\n\t// FireFox's way of handling the text fragment using 'window.location'is\n\t// correct and the following performs a secondary check for other browsers\n\t// (Chrome) that have changed the behavior of 'window.location'.\n\t//\n\t// Use 'performance' API for browsers other than 'Firefox', to\n\t// properly handle text fragments MDN recommends never using user agent or\n\t// browsers to determine logic, but this is the only way in Chrome to\n\t// guaranteed to be given the full URL now that Chrome may remove parts of\n\t// the URL. (WTF).\n\t//\n\t// When running files locally, calling\n\t// `performance.getEntriesByType('navigation')[0].name`\n\t// will return an empty string. Thus, running a file locally that uses\n\t// URLFormJS, and using Chrome, will have no way of preserving fragment\n\t// directives in the URL, since they cannot be interpreted by the browser.\n\t// Another problem under this circumstance is that if the fragment\n\t// directive comes before the fragment query, the fragment query will not\n\t// be interpreted either.\n\t// TODO Implement Chrome API for directives when supported:\n\t// https://github.com/WICG/scroll-to-text-fragment/blob/main/fragment-directive-api.md\n\n\t// See issues for not retrieving full URL (with fragment directives) when\n\t// using 'file://' protocol:\n\t// https://github.com/mozilla/standards-positions/issues/194#issuecomment-1224592766\n\t// https://github.com/WICG/scroll-to-text-fragment/issues/196#issue-1348444072\n\n\t// Can't use 'name' in performance when running locally.\n\tif (window.location.protocol !== \"file:\" && !navigator.userAgent.includes('Firefox')) {\n\t\tfParts = performance.getEntriesByType('navigation')[0].name.split(\"#\");\n\t}\n\n\tif (fParts.length == 1) { // only \"#\"\n\t\treturn \"\";\n\t}\n\t// Always decode URL, even if not URL encoded.\n\treturn decodeURIComponent(fParts[1]);\n}\n\n\n/**\n * SetForm sets GUI for each parameter, and executes funcTrue() per parameter,\n * if applicable. See docs in 'FormOptions'. Form wide options are also executed\n * (e.g. 'callback' in 'FormOptions').\n *\n * @param   {QuagPairs}    kv\n * @param   {FormOptions}  formOptions\n * @returns {void}\n */\nfunction SetForm(kv, formOptions) {\n\ttry {\n\t\tfor (let fp of formOptions.FormParameters) {\n\t\t\t// Set as vars to avoid mutability.\n\t\t\tlet name = fp.name;\n\t\t\tlet value = kv[name];\n\t\t\tlet id = fp.id;\n\n\t\t\t// Sanitize bool `true` to string true.\n\t\t\tif (value === true) {\n\t\t\t\tvalue = \"true\"\n\t\t\t}\n\n\t\t\t// Sanitize flags.\n\t\t\tif (fp.type == \"bool\" && value === \"\") {\n\t\t\t\tvalue = \"true\"\n\t\t\t}\n\n\t\t\t// If id is empty, assume name is the id on the page.\n\t\t\tif (isEmpty(id)) {\n\t\t\t\tid = formOptions.prefix + name;\n\t\t\t}\n\n\t\t\t// Run func if set\n\t\t\tif (!isEmpty(fp.func)) {\n\t\t\t\tfp.func();\n\t\t\t}\n\n\t\t\t// Value may be \"true\", or empty \"\" (flag). Empty \"\" is a flag and is\n\t\t\t// interpreted as true.\n\t\t\tif (fp.type == \"bool\" && value == \"true\") {\n\t\t\t\tif (!isEmpty(fp.funcTrue)) {\n\t\t\t\t\tfp.funcTrue();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Finally Set Gui\n\t\t\tlet e = document.getElementById(id);\n\t\t\tif (e == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (fp.type == \"bool\" && value == \"true\") {\n\t\t\t\te.checked = true;\n\t\t\t}\n\n\t\t\t// Set GUI Non-bool inputs.\n\t\t\tif (!isEmpty(value)) {\n\t\t\t\te.value = value;\n\t\t\t}\n\n\n\t\t\tif (fp.saveSetting) { // Set Action listener for savables.\n\t\t\t\te.addEventListener(\"input\", (e) => {\n\t\t\t\t\tif (fp.type == \"bool\") {\n\t\t\t\t\t\tsetSavedSetting(name, e.target.checked, formOptions);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetSavedSetting(name, e.target.value, formOptions);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\t} finally {\n\t\t//// Form wide options\n\n\t\t// Callback if any.\n\t\tif (!isEmpty(formOptions.callback)) {\n\t\t\tformOptions.callback();\n\t\t}\n\t}\n}\n\n/**\n * Gets the setting. \n * @param   {string}       name\n * @param   {FormOptions}  formOptions\n * @returns {void}\n */\nfunction getSavedSetting(name, formOptions) {\n\treturn localStorage.getItem(formOptions.localStorageNamespace + formOptions.prefix + name);\n}\n\n/**\n * Sets the setting. \n * @param   {string}       name\n * @param   {string}       value\n * @param   {FormOptions}  formOptions\n * @returns {void}\n */\nfunction setSavedSetting(name, value, formOptions) {\n\tconsole.log(\"URLFormJS - Saving setting:\", name, value);\n\treturn localStorage.setItem(formOptions.localStorageNamespace + formOptions.prefix + name, value);\n}\n\n/**\n * Sanitizes a formOptions object, and sets all of the options values to\n * their default value if not set.\n * \n * Modifies \"in place\" as well as returns the object.\n * \n * For new options/setting FormOptions, Init() must be re-called.\n * \n * @param   {FormOptions} formOptions\n * @returns {FormOptions}\n * @throws  {Error}        Fails if FormOptions or 'id' in options is empty.\n */\nfunction sanitizeFormOptions(formOptions) {\n\t// Not making a copy will modify the original, even though it's a const.\n\tlet foc = {\n\t\t...DefaultFormOptions\n\t};\n\t// If no options given, use default.\n\tif (isEmpty(formOptions)) {\n\t\treturn foc;\n\t}\n\t// If FormOptions has already been sanitized, do nothing.\n\tif (!isEmpty(formOptions.Sanitized) && formOptions.Sanitized === true) {\n\t\treturn;\n\t}\n\n\t//// Sanitize\n\tif (!isEmpty(formOptions.formID)) {\n\t\tfoc.formID = formOptions.formID;\n\t}\n\tif (!isEmpty(formOptions.prefix)) {\n\t\tfoc.prefix = formOptions.prefix;\n\t}\n\tif (!isEmpty(formOptions.clearBtn)) {\n\t\tfoc.clearBtn = formOptions.clearBtn;\n\t}\n\tif (!isEmpty(formOptions.shareURLArea)) {\n\t\tfoc.shareURLArea = formOptions.shareURLArea;\n\t}\n\tif (!isEmpty(formOptions.shareURL)) {\n\t\tfoc.shareURL = formOptions.shareURL;\n\t}\n\tif (!isEmpty(formOptions.shareURLBtn)) {\n\t\tfoc.shareURLBtn = formOptions.shareURLBtn;\n\t}\n\tif (!isEmpty(formOptions.defaultQueryLocation)) {\n\t\tfoc.defaultQueryLocation = formOptions.defaultQueryLocation;\n\t}\n\tif (!isEmpty(formOptions.callback)) {\n\t\tfoc.callback = formOptions.callback;\n\t}\n\tif (!isEmpty(formOptions.cleanURL)) {\n\t\tfoc.cleanURL = formOptions.cleanURL;\n\t}\n\tif (!isEmpty(formOptions.localStorageNamespace)) {\n\t\tfoc.localStorageNamespace = formOptions.localStorageNamespace;\n\t}\n\n\t// Options with limited valid values.  \n\tif (formOptions.defaultQueryLocation !== QueryLocationQuery) {\n\t\tfoc.defaultQueryLocation = QueryLocationFragment;\n\t}\n\n\t// Sanitize form parameters. (The `for` is pass by reference, not pass by copy.)\n\tfor (let fp of formOptions.FormParameters) {\n\t\t// If query location is not a recognized 'QueryLocation', use default.\n\t\tif (fp.queryLocation !== QueryLocationFragment && fp.queryLocation !== QueryLocationQuery) {\n\t\t\tfp.queryLocation = foc.defaultQueryLocation;\n\t\t}\n\t\tfoc.FormParameters.push(fp);\n\t}\n\n\tfoc.Sanitized = true;\n\treturn foc;\n}\n\n/**\n * Generates a share URL from the current URL and form, populates the GUI with\n * share links, and returns the URL encoded URL.\n *\n * Fragment query parameters take precedence over query parameters.\n *\n * @param   {FormOptions}   formOptions\n * @returns {URL}           Javascript URL object.\n */\nfunction ShareURI(formOptions) {\n\tlet q = GetQuagParts(formOptions); // Current URL values.\n\tlet formPairs = GetForm(formOptions); // Current form values.\n\t//console.log(\"QuagParts:\", q, \"formPairs:\", formPairs);\n\tvar u = new URL(window.location.origin + window.location.pathname);\n\n\tfor (let fp of formOptions.FormParameters) {\n\t\tlet value = formPairs[fp.name];\n\t\t// console.log(fp, value);\n\t\tif (isEmpty(value)) {\n\t\t\t// Sets value if populated.  Otherwise removes from the query/fragment. (A\n\t\t\t// query parameter set in fragment, or a fragment parameter set in Query.\n\t\t\t// Note: bools on false will not have been cleared yet.)\n\t\t\tu.searchParams.delete(fp.name);\n\t\t\tdelete q.fragment.pairs[fp.name];\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Set to Fragment\n\t\tif (fp.queryLocation === QueryLocationFragment) {\n\t\t\tu.searchParams.delete(fp.name);\n\t\t\tq.fragment.pairs[fp.name] = value;\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Set to Query\n\t\tu.searchParams.set(fp.name, value);\n\t\tdelete q.fragment.pairs[fp.name];\n\t}\n\n\t// Query extras\n\tif (!isEmpty(q.query.extras) && !formOptions.cleanURL) {\n\t\tfor (let e in q.query.extras) {\n\t\t\tu.searchParams.set(e, q.query.extras[e]);\n\t\t}\n\t}\n\n\t// Rebuild fragment query in case new form fields were set.\n\tu.hash = quagPartsToURLHash(q.fragment, formOptions);\n\tsetShareURL(u.href, formOptions);\n\n\treturn u;\n};\n\n\n/**\n * Sets the URL on share link and share area.  \n * @param   {String}       href\n * @returns voice\n */\nfunction setShareURL(href, formOptions) {\n\t// URI Link\n\tlet shareUrl = document.querySelector(formOptions.shareURL);\n\tif (shareUrl !== null) {\n\t\tshareUrl.innerHTML = href.link(href);\n\t}\n\n\t// Text Area \n\tlet shareArea = document.querySelector(formOptions.shareURLArea);\n\tif (shareArea !== null) {\n\t\tshareArea.innerHTML = href;\n\t}\n}\n\n\n/**\n * Generates a URL encoded fragment string from Fragment.\n * \n * @param   {Fragment}      fragment\n * @param   {FormOptions}   formOptions\n * @returns {String}        Fragment string (#<before>?<middle(fromForm?extras)>[delimiter]<after>).\n */\nfunction quagPartsToURLHash(fragment, formOptions) {\n\t// Concatenate fragment (\"#\") and before.\n\tlet fqs = \"#\" + fragment.before;\n\n\t// Middle.  Build the fragment query.  (Query is the middle).\n\tvar i = Object.keys(fragment.pairs).length;\n\tif (i != 0) {\n\t\tfqs += \"?\"; //start fragment query delimiter (\"?\")\n\t\tfor (let key in fragment.pairs) {\n\t\t\ti--;\n\t\t\tfqs += key + \"=\" + fragment.pairs[key]\n\t\t\tif (i > 0) {\n\t\t\t\tfqs += \"&\"; // Add separator on everything except the last.  \n\t\t\t}\n\t\t}\n\t}\n\n\t// Extras (still in middle)\n\tlet j = Object.keys(fragment.extras).length;\n\tif (Object.keys(fragment.pairs).length && j > 0) {\n\t\tfqs += \"&\"; // Prepend extras with ampersand if fragment is populated. \n\t}\n\t// Append extras back in query params\n\tif (j > 0 && !formOptions.cleanURL) {\n\t\tfor (let e in fragment.extras) {\n\t\t\tj--;\n\t\t\tfqs += e + \"=\" + fragment.extras[e]\n\t\t\tif (j > 0) {\n\t\t\t\tfqs += \"&\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// After.\n\tfqs += fragment.after;\n\treturn encodeURIComponent(fqs);\n}\n\n\n/**\n * Returns from `key=value` string a `key:value` object.\n * \n * @param   {String}      s   e.g. `key=value&key=value`.\n * @returns {QuagPairs}       {key:value}\n */\nfunction getPairs(s) {\n\tif (isEmpty(s)) {\n\t\treturn {};\n\t}\n\n\tlet pairs = {};\n\tlet parts = s.split('&');\n\tfor (const i in parts) {\n\t\tlet kv = parts[i].split('=');\n\t\tlet key = kv[0];\n\t\tlet value = kv[1];\n\t\t// If the string begins/ends with \"&\", there will be an empty element. \n\t\tif (isEmpty(key)) {\n\t\t\tcontinue;\n\t\t}\n\t\t// Sanitize to string. (Don't use isEmpty as string \"true\"/\"false\" are valid.)\n\t\tif (value === undefined || value === null) {\n\t\t\tvalue = \"\";\n\t\t}\n\t\t// Browsers automatically escape values. Javascript 'unescape()' is deprecated.\n\t\t// 'decodeURI' expects the full URI.\n\t\tpairs[key] = decodeURIComponent(value);\n\t}\n\treturn pairs;\n}\n\n\n/**\n * GetQuagParts returns QuagParts generated from the current URL, not the\n * form, and puts values into the correct object based on formOptions.\n * Includes extras.  See docs on `QuagParts`.\n * \n * @param   {FormOptions}   formOptions\n * @returns {QuagParts}\n */\nfunction GetQuagParts(formOptions) {\n\t/**\n\t * getFragment returns (fragment,pairs,before,query,after) from the URL\n\t * fragment, but not (extras). Warning: Puts all pairs, including extras, into\n\t * pairs.\n\t * @returns {Fragment}\n\t */\n\tfunction getFragment() {\n\t\tlet frag = {\n\t\t\tstring: getFragmentString(), // The whole fragment including `#`. \n\t\t\tpairs: {},\n\t\t\textras: {},\n\t\t\tbefore: \"\",\n\t\t\tquery: \"\",\n\t\t\tafter: \"\",\n\t\t};\n\n\t\t// Check if fragment query has 'before'.\n\t\tlet ss = frag.string.split('?');\n\t\tif (ss.length == 0) {\n\t\t\tfrag.query = ss[0];\n\t\t} else {\n\t\t\tfrag.before = ss[0];\n\t\t\tfrag.query = ss[1];\n\t\t}\n\n\t\t// Check for after. Fragment queries supports beginning delimiters for other\n\t\t// fragment schemes, like fragment directive `:~:`.\n\t\tif (!isEmpty(frag.query)) {\n\t\t\tlet s = frag.query.split(':~:');\n\t\t\tif (s.length > 1) {\n\t\t\t\tfrag.query = s[0];\n\t\t\t\tfrag.after = ':~:' + s[1];\n\t\t\t}\n\t\t}\n\t\tfrag.pairs = getPairs(frag.query);\n\n\t\t// Javascript deep copy\n\t\treturn JSON.parse(JSON.stringify(frag));\n\t}\n\n\tlet qp = {\n\t\tquery: {\n\t\t\tstring: decodeURIComponent(window.location.search.substring(1)), // substring removes \"?\"\n\t\t\tpairs: getPairs(window.location.search.substring(1)),\n\t\t\textras: {},\n\t\t},\n\t\tfragment: getFragment(),\n\t};\n\n\tqp.pairs = {\n\t\t...qp.query.pairs,\n\t\t...qp.fragment.pairs,\n\t};\n\n\t// Generate extras and remove any extras from Query and Fragment.  \n\tlet formParams = [];\n\tfor (let p of formOptions.FormParameters) {\n\t\tformParams.push(p.name);\n\t}\n\n\t// Extra query pairs.\n\tfor (let key of Object.keys(qp.query.pairs)) {\n\t\tif (!formParams.includes(key)) {\n\t\t\tqp.query.extras[key] = qp.query.pairs[key];\n\t\t\tdelete qp.query.pairs[key];\n\t\t}\n\t}\n\t// Extra frag pairs.\n\tfor (let key of Object.keys(qp.fragment.pairs)) {\n\t\tif (!formParams.includes(key)) {\n\t\t\tqp.fragment.extras[key] = qp.fragment.pairs[key];\n\t\t\tdelete qp.fragment.pairs[key];\n\t\t}\n\t}\n\n\treturn qp;\n}\n\n/**\n * GetURLKeyValue is a helper func that returns the key:value pairs from the\n * URL. Default behavior overwrites query pairs with fragment pairs.\n *\n * @param   {FormOptions}     formOptions\n * @returns {QuagParts.pairs}\n */\nfunction GetURLKeyValue(formOptions) {\n\tlet qp = GetQuagParts(formOptions);\n\treturn qp.pairs;\n}\n\n\n/**\n * Serialize serializes the initialized FormParameters that are populated in the\n * GUI into a JSON string.\n * \n * @param   {FormOptions}   formOptions\n * @returns {String}\n */\nfunction Serialize(formOptions) {\n\treturn JSON.stringify(GetForm(formOptions));\n};\n\n\n/**\n * GetForm gets current form values from the GUI into {key:value,key:value}.\n *\n * ReturnPairOnZero: Whether all pairs from 'GetForm' will always be returned.\n * Otherwise, on zero value, the pair will not be returned in the pairs object.\n * \n * @param   {FormOptions}   formOptions\n * @param   {Boolean}       [ReturnPairOnZero]\n * @returns {QuagPairs}     key/value\n */\nfunction GetForm(formOptions, ReturnPairOnZero) {\n\tif (!formOptions.Inited) {\n\t\tthrow new Error(\"URLFormJS: Init() must be called first to initialize the URLFormJS module.\");\n\t}\n\n\tlet pairs = {};\n\t// Normal usage, Not FormMode.  On individual ID's, not in a <form>.\n\tif (!formOptions.FormMode) {\n\t\tfor (let fp of formOptions.FormParameters) {\n\t\t\tlet value;\n\n\t\t\tlet htmlID = fp.name;\n\t\t\tif (!isEmpty(fp.id)) {\n\t\t\t\thtmlID = fp.id;\n\t\t\t}\n\t\t\tlet elem = document.getElementById(formOptions.prefix + htmlID);\n\t\t\tif (elem !== null) {\n\t\t\t\tswitch (fp.type) {\n\t\t\t\t\tdefault: // String\n\t\t\t\t\t\tvalue = elem.value;\n\t\t\t\t\t\t// Sanitize undefined\n\t\t\t\t\t\tif (isEmpty(value)) {\n\t\t\t\t\t\t\tvalue = \"\";\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"bool\":\n\t\t\t\t\t\tvalue = elem.checked;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"number\":\n\t\t\t\t\t\tvalue = Number(elem.value);\n\t\t\t\t\t\t// Sanitize NaN\n\t\t\t\t\t\tif (isEmpty(value)) {\n\t\t\t\t\t\t\tvalue = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!isEmpty(value)) {\n\t\t\t\tpairs[fp.name] = value;\n\t\t\t} else if (ReturnPairOnZero) {\n\t\t\t\tpairs[fp.name] = value;\n\t\t\t}\n\t\t}\n\t\treturn pairs;\n\t}\n\n\t// FormMode=true.  In a <form>.\n\tlet formData = new FormData(formOptions.FormElement); // throws\n\tfor (let [name, value] of formData) {\n\t\tif (value == \"true\" || value == \"on\") {\n\t\t\tvalue = true;\n\t\t}\n\t\tif (value == \"false\" || value == \"unchecked\") {\n\t\t\tvalue = false;\n\t\t}\n\n\t\t// Remove prefix, if set.\n\t\tif (!isEmpty(formOptions.prefix)) {\n\t\t\tname = name.substring(formOptions.prefix.length);\n\t\t}\n\n\t\tif (!isEmpty(value)) {\n\t\t\tpairs[name] = value;\n\t\t} else if (ReturnPairOnZero) {\n\t\t\tpairs[name] = value;\n\t\t}\n\t}\n\treturn pairs;\n};\n\n/**\n * GetFormElements will return a key:value object, where the key's are the given\n * form parameters, and the values are the elements that hold the form\n * parameters' values.\n * \n * @param   {FormOptions}   formOptions\n * @returns {QuagPairs}     key/value (where value is an HTML Element)\n */\nfunction GetFormElements(formOptions) {\n\tlet elems = {};\n\tfor (let param of formOptions.FormParameters) {\n\t\telems[param.name] = document.getElementById(formOptions.prefix + param.name);\n\t}\n\treturn elems;\n};\n\n\n/**\n * Clear clears out a form.\n *\n * @param   {FormOptions}   formOptions\n * @returns {void}\n */\nfunction Clear(formOptions) {\n\tif (!formOptions.Inited) {\n\t\tthrow new Error(\"URLFormJS: Init() must be called first to initialize the URLFormJS module.\");\n\t}\n\n\t// FormMode clear\n\tif (formOptions.FormMode) {\n\t\t//https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements\n\t\tfor (let e of FormOptions.FormElement.elements) {\n\t\t\tif (e.type === \"checkbox\") {\n\t\t\t\te.checked = false;\n\t\t\t} else {\n\t\t\t\te.value = \"\";\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\n\t// Normal Mode clear (clear each element individually)\n\tfor (let fp of formOptions.FormParameters) {\n\t\tlet name = formOptions.prefix + fp.name;\n\t\tlet id = fp.id\n\t\t// If id is empty, assume name is the id on the page.\n\t\tif (isEmpty(id)) {\n\t\t\tid = name;\n\t\t}\n\n\t\t// Unchecks if type=bool. Otherwise sets value of the element to \"\";\n\t\tif (fp.type == \"bool\") {\n\t\t\tlet e = document.getElementById(id);\n\t\t\tif (e != null) {\n\t\t\t\te.checked = false;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet e = document.getElementById(id);\n\t\tif (e != null) {\n\t\t\te.value = \"\";\n\t\t}\n\t}\n\t// Clear the share URL.  \n\tvar u = new URL(window.location.origin + window.location.pathname)\n\tsetShareURL(u.href, formOptions);\n}\n\n/**\n * IsEmpty returns whether or not the initialized form is empty.\n * \n * @param   {FormOptions}   formOptions\n * @returns {Boolean}  Whether or not the form is empty.\n * @throws  {Error}    Fails if form is not of type HTMLFormElement.\n */\nfunction IsEmpty(formOptions) {\n\treturn isEmpty(GetForm(formOptions));\n}\n\n/**\n * GetDefaultFormOptions returns the Initialized default form options.\n * NOTE: Exporting DefaultFormOptions directly will make it to where the\n * UMD format block needs to be at the bottom of the file, after initialization.\n * \n * @returns {FormOptions}\n */\nfunction GetDefaultFormOptions() {\n\treturn DefaultFormOptions;\n}\n\n\n/**\n * isEmpty is a helper function to determine if thing is empty. \n * \n * Functions are considered always not empty. \n * \n * Arrays are checked for the number of elements, and recursively calls isEmpty.  \n * \n * Objects are empty if they have no keys. (Returns len === 0 of object keys.)\n * \n * NaN returns true.  (NaN === NaN is always false, as NaN is never equal to\n * anything. NaN is the only JavaScript value unequal to itself.)\n *\n * Don't use on HTMl elements. For HTML elements, use the !== equality check\n * (element !== null). \n *\n * Cannot use CryptoKey with this function since (len === 0) always. \n *\n * @param   {any}     thing    Thing you wish was empty.  \n * @returns {Boolean}          Boolean.  \n */\nfunction isEmpty(thing) {\n\tif (typeof thing === 'function') {\n\t\treturn false;\n\t}\n\n\tif (Array.isArray(thing)) {\n\t\treturn isEmpty(thing[0]);\n\t}\n\n\tif (thing === Object(thing)) {\n\t\tif (Object.keys(thing).length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tif (!isBool(thing)) {\n\t\treturn true;\n\t}\n\treturn false\n};\n\n/**\n * Helper function to determine boolean.  \n *\n * Javascript, instead of considering everything false except a few key words,\n * decided everything is true instead of a few key words.  Why?  Because\n * Javascript.  This function inverts that assumption, so that everything can be\n * considered false unless true. \n *\n * @param   {any}      bool   Thing that you wish was a boolean.  \n * @returns {Boolean}         An actual boolean.\n */\nfunction isBool(bool) {\n\tif (\n\t\tbool === false ||\n\t\tbool === \"false\" ||\n\t\tbool === undefined ||\n\t\tbool === \"undefined\" ||\n\t\tbool === \"\" ||\n\t\tbool === 0 ||\n\t\tbool === \"0\" ||\n\t\tbool === null ||\n\t\tbool === \"null\" ||\n\t\tbool === \"NaN\" ||\n\t\tNumber.isNaN(bool) ||\n\t\tbool === Object(bool) // isObject\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n\n\n\n"],
  "mappings": "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",
  "names": ["formOptions", "formOpt", "savedPairs", "fp", "uriPairs", "pairs", "quagPairs", "fParts", "kv", "name", "value", "id", "e", "foc", "q", "formPairs", "u", "href", "shareUrl", "shareArea", "fragment", "fqs", "i", "key", "j", "s", "parts", "getFragment", "frag", "ss", "qp", "formParams", "p", "ReturnPairOnZero", "htmlID", "elem", "formData", "elems", "param", "thing", "bool"]
}
